routes:
    /queues:
        GET:
            description: |-
                Get information about every queue,
                ordered by order created
            responses:
                200:
                    description: A list of queues
                    body: $data.response.get_queues

        POST:
            description: Create a queue
            tables:
                Body:
                    - name: name
                      type: optional string
                      description: >-
                          Name of this queue.
                          Can be used instead interchangeably with its id
                          in API calls, and so it should be unique
                      default: "`null`"
                    - name: capacity
                      type: optional int
                      description: >-
                          The capacity of this queue
                          If messages are pushed onto a full queue,
                          whatever is on the head is pushed out in a fifo style.
                          If the capacity is null, the queue has an unlimited size
                      default: "`null`"
                    - name: ephemeral
                      type: bool
                      description: >-
                        Is this queue ephemeral?
                        Ephemeral queues are not backed by any storage,
                        but instead are completely in memory.
                        This allowes them to be written to read read from quickly,
                        but they are lost when the server goes down
                      default: "`false`"
            body: $data.request.post_queues
            responses:
                200:
                    description: The queue was created
                    body: $data.response.post_queues

                409: $response.generic_409

    /queues/:queue:
        GET:
            description: Get information about this queue
            responses:
                200:
                    description: Information about this queue
                    body: $data.response.get_single_queue
                400: $response.generic_404

        PUT:
            description: |-
                Put a message onto the tail of this queue
                If this queue does not exist, it will be created
                populated with the sent message
            responses:
                201:
                    description: The message was put onto the queue's tail
                406: $response.queue_406
                413: $response.queue_413

        DELETE:
            description: |-
                Delete this queue
                Multiple calls are idempotent, so if there is no queue targeted
                nothing will happen
            responses:
                204:
                    description: Queue was deleted

    /queues/:queue/head:
        GET:
            description: |-
                Pop the next message on this queue
                This will consume the item at the queue's head
                This is equivalent to `GET /queues/:queue/consume/0`
            responses:
                200:
                    description: Whatever is on this queue's head
                    body: $data.response.get_message
                404: $response.queue_404

    /queues/:queue/tail:
        GET:
            description: |-
                Get the last message on this queue
                This will consume the items at the queue's tail
                This is equivalent to `GET /queues/:queue/consume/<len>`
                where `<len>` == this queue's length - 1
            responses:
                200:
                    description: Whatever is on this queue's tail
                    body: $data.response.get_message
                404: $response.queue_404

    /queues/:queue/consume/:index:
        GET:
            description: |-
                Consume a message from this queue
                Consuming a message will return its content,
                and delete it from the queue.
                Indexing is 0 based, starting from the head,
                where the most recent message will be
            responses:
                200:
                    description: Whatever is on the queue at this index
                    body: $data.response.get_message
                404: $response.queue_404

    /queues/:queue/peek/:index:
        GET:
            description: |-
                Read a message from this queue without consuming it
                This functions similarly to `/consume`,
                but does not consume messages when they are read.
                Thus allowing you to "peek" at messages
            responses:
                200:
                    description: Whatever is on the queue at this index
                    body: $data.response.get_message
                404: $response.queue_404
